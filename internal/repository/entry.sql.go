// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: entry.sql

package repository

import (
	"context"
	"database/sql"
)

const addEntry = `-- name: AddEntry :one
INSERT INTO entry (
    task_id
) VALUES (
    ?
) returning id, task_id, start_timestamp, end_timestamp, recorded_time, finished
`

func (q *Queries) AddEntry(ctx context.Context, taskID int64) (Entry, error) {
	row := q.db.QueryRowContext(ctx, addEntry, taskID)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.StartTimestamp,
		&i.EndTimestamp,
		&i.RecordedTime,
		&i.Finished,
	)
	return i, err
}

const calculateTaskTime = `-- name: CalculateTaskTime :one
SELECT SUM(end_timestamp - start_timestamp) 
FROM entry 
WHERE task_id = ?
`

func (q *Queries) CalculateTaskTime(ctx context.Context, taskID int64) (sql.NullFloat64, error) {
	row := q.db.QueryRowContext(ctx, calculateTaskTime, taskID)
	var sum sql.NullFloat64
	err := row.Scan(&sum)
	return sum, err
}

const clearEntries = `-- name: ClearEntries :exec
DELETE FROM entry
`

func (q *Queries) ClearEntries(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, clearEntries)
	return err
}

const deleteEntry = `-- name: DeleteEntry :exec
DELETE FROM entry 
WHERE id = ?
`

func (q *Queries) DeleteEntry(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEntry, id)
	return err
}

const findAllEntries = `-- name: FindAllEntries :many
SELECT id, task_id, start_timestamp, end_timestamp, recorded_time, finished
FROM entry
`

func (q *Queries) FindAllEntries(ctx context.Context) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, findAllEntries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.TaskID,
			&i.StartTimestamp,
			&i.EndTimestamp,
			&i.RecordedTime,
			&i.Finished,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findEntryById = `-- name: FindEntryById :one
SELECT id, task_id, start_timestamp, end_timestamp, recorded_time, finished 
FROM entry 
WHERE id = ?
LIMIT 1
`

func (q *Queries) FindEntryById(ctx context.Context, id int64) (Entry, error) {
	row := q.db.QueryRowContext(ctx, findEntryById, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.StartTimestamp,
		&i.EndTimestamp,
		&i.RecordedTime,
		&i.Finished,
	)
	return i, err
}

const finishEntry = `-- name: FinishEntry :exec
UPDATE entry
SET finished=1
WHERE id = ?
`

func (q *Queries) FinishEntry(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, finishEntry, id)
	return err
}
