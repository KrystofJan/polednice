// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: task.sql

package repository

import (
	"context"
)

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM task 
WHERE id = ?
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const findAllTasks = `-- name: FindAllTasks :many
SELECT id, name, start_timestamp, end_timestamp, finished, recorded_time 
FROM task
`

func (q *Queries) FindAllTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, findAllTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.StartTimestamp,
			&i.EndTimestamp,
			&i.Finished,
			&i.RecordedTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findTaskById = `-- name: FindTaskById :one
SELECT id, name, start_timestamp, end_timestamp, finished, recorded_time 
FROM task 
WHERE id = ?
LIMIT 1
`

func (q *Queries) FindTaskById(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, findTaskById, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StartTimestamp,
		&i.EndTimestamp,
		&i.Finished,
		&i.RecordedTime,
	)
	return i, err
}

const finishTask = `-- name: FinishTask :exec
UPDATE task
SET finished = 1
WHERE id = ?
`

func (q *Queries) FinishTask(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, finishTask, id)
	return err
}
